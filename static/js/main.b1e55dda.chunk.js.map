{"version":3,"sources":["store/actions/search.js","store/actions/index.js","store/reducers/users.js","store/reducers/urls.js","store/reducers/totalCount.js","store/reducers/keyword.js","store/reducers/page.js","store/reducers/pagination.js","store/reducers/serverError.js","store/reducers/index.js","store/index.js","components/Home.js","components/SearchBar.js","components/Results.js","components/Main.js","components/PageNav.js","app.js","serviceWorker.js","index.js"],"names":["gotUsers","users","type","gotUrls","urls","config","headers","localStorage","window","actionTypes","actions","searchUsers","keyword","APIPage","dispatch","urlsLS","getItem","JSON","parse","Promise","all","axios","get","then","data","totalCount","gotTotalCount","userUrls","items","map","userObj","url","catch","err","console","error","fetchUsers","num","getState","startPage","Math","floor","maxPage","min","ceil","endPage","pagination","usersLS","startIdx","paginatedUrls","slice","name","avatarUrl","avatar_url","email","login","location","repos","public_repos","followers","bio","html_url","gotKeyword","clearUsers","gotPage","page","clearTotalCount","initialState","reducer","state","action","combineReducers","serverError","store","createStore","applyMiddleware","thunk","Home","id","SearchBar","keywordOnFile","useSelector","fullname","language","warning","useState","setState","advance","setAdvance","keywordWarning","setKeywordWarning","show","history","useHistory","handleChange","e","target","value","useEffect","keywordFromQuery","idxOfPlus","indexOf","replace","nameArr","exec","nameFromQuery","reposArr","reposFromQuery","followersArr","followersFromQuery","languageArr","languageFromQuery","className","onSubmit","preventDefault","fullnameString","reposString","followersString","languageString","query","push","src","alt","placeholder","onChange","required","onClick","form","lan","lanVal","key","document","querySelector","selectedIndex","Results","useParams","pageOnFile","useDispatch","clear","length","href","Main","PageNav","pages","i","handlePreviousGroup","setItem","stringify","handleNextGroup","handleGoToPage","Number","fontWeight","toString","App","path","component","Boolean","hostname","match","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b1e55dda.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const GOT_USERS = 'GOT_USERS'\nexport const GOT_URLS = 'GOT_URLS'\nexport const GOT_TOTAL_COUNT = 'GOT_TOTAL_COUNT'\nexport const GOT_KEYWORD = 'GOT_KEYWORD'\nexport const CLEAR_USERS = 'CLEAR_USERS'\nexport const GOT_PAGE = 'GOT_PAGE'\nexport const CLEAR_TOTAL_COUNT = 'CLEAR_TOTAL_COUNT'\nexport const GOT_PAGINATION = 'GOT_PAGINATION'\nexport const GOT_SERVER_ERROR = 'GOT_SERVER_ERROR'\nexport const CLEAR_SERVER_ERROR = 'CLEAR_SERVER_ERROR'\n\n// action creator\nconst gotUsers = users => ({type: GOT_USERS, users})\nconst gotUrls = urls => ({type: GOT_URLS, urls})\nconst gotTotalCount = totalCount => ({type: GOT_TOTAL_COUNT, totalCount})\nexport const gotKeyword = keyword => ({type: GOT_KEYWORD, keyword})\nexport const clearUsers = () => ({type: CLEAR_USERS})\nexport const gotPage = page => ({type: GOT_PAGE, page})\nexport const clearTotalCount = () => ({type: CLEAR_TOTAL_COUNT})\nconst gotPagination = pagination => ({type: GOT_PAGINATION, pagination})\nconst gotServerError = () => ({type: GOT_SERVER_ERROR})\nconst clearServerError = () => ({type: CLEAR_SERVER_ERROR})\n\nconst config = {\n  headers: {\n    'Authorization' : 'token '+ process.env.REACT_APP_PUBLIC_ACCESS_ONLY_PAT\n  }\n}\n\nconst localStorage = window.localStorage\n\n// thunk creator\n// all the GET FROM LOCALSTORAGE happens in thunk before making api calls\nexport const searchUsers = (keyword, APIPage) => dispatch => {\n\n  dispatch(clearServerError())\n\n  // LOCAL STORAGE: if urls can be found in localStorage, load it from localStorage then dispatch to store\n  const urlsLS = localStorage.getItem(`API${APIPage}`)\n  if(urlsLS) {\n    const urls = JSON.parse(urlsLS)\n    const fakePromise = () => dispatch(gotUrls(urls))\n    return Promise.all([fakePromise])\n  }\n  \n  return axios.get(`https://api.github.com/search/users?q=${keyword}&page=${APIPage}&per_page=100`, config)\n    .then(({data}) => {\n      const totalCount = data['total_count']\n      dispatch(gotTotalCount(totalCount))\n\n      const userUrls = data.items.map(userObj => userObj.url) //array of user objects\n      dispatch(gotUrls(userUrls))\n    })\n    .catch(err => {\n      console.error(err)\n      dispatch(gotServerError())\n    })\n}\n\nexport const fetchUsers = num => (dispatch, getState) => {\n\n  const userPerPage = 10\n  \n  let startPage\n  if(num%userPerPage === 0) {\n    startPage = num - userPerPage + 1\n  } else {\n    startPage = Math.floor(num/userPerPage)*10 + 1\n  }\n  const { totalCount } = getState()\n  const maxPage = Math.min(Math.ceil(totalCount/10),100)\n  const endPage = Math.min(startPage+userPerPage-1, maxPage)\n  dispatch(gotPagination([startPage, endPage]))\n\n  // LOCALSTORAGE: if page can be found in localStorage, load it from localStorage then dispatch to store\n  const usersLS = localStorage.getItem(num+'')\n  if(usersLS) {\n    const users = JSON.parse(usersLS)\n    return dispatch(gotUsers(users))\n  }\n\n  const { urls } = getState()\n  const startIdx = (num-1)*userPerPage\n\n  const paginatedUrls = urls.slice(startIdx%100, startIdx%100===90? 100 : (startIdx+userPerPage)%100)\n\n\n  return Promise.all(paginatedUrls.map(url => axios.get(url, config)))\n    .then(data => (\n      data.map(({data}) => {\n        const {name, avatar_url, email, login, location, public_repos, followers, bio, html_url} = data\n        return {\n          name,\n          avatarUrl : avatar_url,\n          email,\n          login,\n          location,\n          repos: public_repos,\n          followers,\n          bio,\n          url: html_url\n        }\n      })\n    ))\n    .then(users => {\n      dispatch(gotUsers(users))\n    })\n    .catch(err => {\n      console.error(err)\n      dispatch(gotServerError())\n    })\n}","import { GOT_USERS, GOT_URLS, GOT_TOTAL_COUNT, GOT_KEYWORD, CLEAR_USERS, GOT_PAGE, CLEAR_TOTAL_COUNT, GOT_PAGINATION, GOT_SERVER_ERROR, CLEAR_SERVER_ERROR, gotKeyword, searchUsers, fetchUsers, clearUsers, gotPage, clearTotalCount } from './search'\n\nconst actions = {\n  searchUsers,\n  fetchUsers,\n  gotKeyword,\n  clearUsers,\n  gotPage,\n  clearTotalCount\n}\n\nexport const actionTypes = {\n  GOT_USERS,\n  GOT_URLS,\n  GOT_TOTAL_COUNT,\n  GOT_KEYWORD,\n  CLEAR_USERS,\n  GOT_PAGE,\n  CLEAR_TOTAL_COUNT,\n  GOT_PAGINATION,\n  GOT_SERVER_ERROR,\n  CLEAR_SERVER_ERROR\n}\n\nexport default actions","import { actionTypes } from '../actions'\n\nconst initialState = []\n/*\n[{\n  name: (text) or null,\n  login: (text),\n  email: (text) or null,\n  location: (text) or null,\n  repos: (number),\n  followers : (number),\n  desc: (text) or null\n}]\n*/\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_USERS:\n      return action.users\n    case actionTypes.CLEAR_USERS:\n      return []\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = []\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_URLS:\n      return action.urls\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = -1\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_TOTAL_COUNT:\n      return action.totalCount\n    case actionTypes.CLEAR_TOTAL_COUNT:\n      return -1\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = ''\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_KEYWORD:\n      return action.keyword\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = 0\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_PAGE:\n      return action.page\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = []\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_PAGINATION:\n      return action.pagination\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = false\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_SERVER_ERROR:\n      return true\n    case actionTypes.CLEAR_SERVER_ERROR:\n      return false\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { combineReducers } from 'redux'\nimport users from './users'\nimport urls from './urls'\nimport totalCount from './totalCount'\nimport keyword from './keyword'\nimport page from './page'\nimport pagination from './pagination'\nimport serverError from './serverError'\n\nconst reducer = combineReducers({\n  users,\n  urls,\n  totalCount,\n  keyword,\n  page,\n  pagination,\n  serverError\n})\n\nexport default reducer","import { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducers'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store","import React from 'react'\nimport { SearchBar } from '../components'\n\nconst Home = () => {\n\n  return (\n    <div id='home'>\n      <SearchBar />\n    </div>\n  )\n}\n\nexport default Home","import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nconst SearchBar = () => {\n\n  const keywordOnFile = useSelector(state => state.keyword)\n\n  const initialState = {\n    keyword: '',\n    fullname: '',\n    repos: 0,\n    followers: 0,\n    language: '',\n    warning: ''\n  }\n  const [state, setState] = useState(initialState)\n  let {keyword, fullname, repos, followers, language, warning} = state\n\n  const [advance, setAdvance] = useState(-1)\n  const [keywordWarning, setKeywordWarning] = useState(false)\n  let show = ''\n  switch(advance) {\n    case -1:\n      show = 'advance-methods'\n      break\n    case 0:\n      show = 'advance-methods close'\n      break\n    case 1:\n      show = 'advance-methods show'   \n      break\n    default:\n      break\n  }\n\n  const history = useHistory()\n\n  const handleChange = e => {\n    if(e.target.name === 'keyword') {\n      setState({...initialState, keyword: e.target.value})\n    } else {\n      setState({...state, [e.target.name]: e.target.value})\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    keyword = keyword.replace(/#/g, '%23')\n  \n    // build query string\n    // check if fullname contains character other than \\w\n    let fullnameString = ''\n    if(fullname) {\n      const checkNameRe = /^(\\w|\\s)+$/g\n      const namecheckArr = checkNameRe.exec(fullname)\n      \n      if(namecheckArr) {\n        fullnameString = `+fullname:${fullname}`\n      } else {\n        // show warning\n        setState({...state, warning: '**Name can only contain alphabets and space'})\n        return\n      }\n    }\n    setState({...state, warning: ''})\n    \n    const reposString = repos ? `+repos:>${repos}` : ''\n    const followersString = followers ? `+followers:>${followers}` : ''\n    const languageString = language ? `+language:${language}` : ''\n    const query= keyword + fullnameString + reposString + followersString + languageString\n\n    //redirect\n    history.push(`/search/${query}/1`)\n  }\n\n  const handleSetAdvance = () => {\n    // when a keyword is not provided\n    if(!keyword) {\n      setKeywordWarning(true)\n      setAdvance(-1)\n    } else {\n      setKeywordWarning(false)\n\n      // if drop-down is already opened\n      if(advance === 1) {\n        setAdvance(0)\n      } else {\n        //if drop-down is closed\n        setAdvance(1)\n      }\n    }\n  }\n\n  const handleClearFilters = () => {\n    setState({...state, fullname: '', repos: 0, followers: 0, language: ''})\n    let selectBar = document.querySelector('#drop-down')\n    selectBar.selectedIndex = 0\n  }\n\n  useEffect(() => {\n    //extract keyword & filter info from url query string\n    if(keywordOnFile) { \n      const idxOfPlus = keywordOnFile.indexOf('+')\n      let keywordFromQuery\n      if(idxOfPlus > 0) {\n        keywordFromQuery = keywordOnFile.slice(0, idxOfPlus)\n      } else {\n        keywordFromQuery = keywordOnFile\n      }\n      keywordFromQuery = keywordFromQuery.replace(/%23/g, '#')\n\n      const nameRe = /fullname:((\\w|\\s)+)(\\+|$)/g\n      const nameArr = nameRe.exec(keywordOnFile)\n      let nameFromQuery = ''\n      if(nameArr) {\n        nameFromQuery = nameArr[1]\n      }\n\n      const reposRe = /repos:>(\\d+)(\\+|$)/g\n      const reposArr = reposRe.exec(keywordOnFile)\n      let reposFromQuery = 0\n      if(reposArr) {\n        reposFromQuery = reposArr[1]\n      }\n      \n      const followersRe = /followers:>(\\d+)(\\+|$)/g\n      const followersArr = followersRe.exec(keywordOnFile)\n      let followersFromQuery = 0\n      if(followersArr) {\n        followersFromQuery = followersArr[1]\n      }\n\n      const languageRe = /language:((\\w+))(\\+|$)/g\n      const languageArr = languageRe.exec(keywordOnFile)\n      let languageFromQuery = ''\n      if(languageArr) {\n        languageFromQuery = languageArr[1]\n      }\n\n      setState({...state, \n        keyword: keywordFromQuery, \n        fullname: nameFromQuery, \n        repos: reposFromQuery,\n        followers: followersFromQuery,\n        language: languageFromQuery\n      })\n    }\n  }, [keywordOnFile])\n\n  // language array\n  const ghLans = [ 'ABAP', 'C', 'C#', 'C++', 'Clojure', 'CoffeeScript', 'Common Lisp', 'Coq', 'Crystal', 'Dart', 'DM', 'Elixir', 'Elm', 'Emacs Lisp', 'Erlang', 'F#', 'Fortran', 'Go', 'Groovy', 'Hashell', 'Java', 'Javascript', 'Jsonnet', 'Julia', 'Kotlin', 'Lua', 'MATLAB', 'Nix', 'Objective-C', 'Objective-C++', 'OCaml', 'Perl', 'PHP', 'PowerShell', 'Puppet', 'PureScript', 'Python', 'R', 'Ruby', 'Rust', 'Scala', 'Shell', 'Smalltalk', 'Swift', 'TSQL', 'TypeScript', 'Vala', 'Vim script', 'Visual Basic .NET', 'WebAssembly']\n\n  return(\n    <div>\n      <form id='search' className='search-bar' onSubmit={handleSubmit}>\n        <div className='main-methods'>\n          <img id='icon' src={process.env.PUBLIC_URL + '/icons/G.ico'} alt='icon'/>\n          <div className='green'>\n            <input className='keyword' type='text' placeholder='Search Github users ...' name='keyword' value={keyword} onChange={handleChange} required/>\n          </div>        \n          <input className='submit' type='submit' value='Search'/>\n        </div>\n        <div className={'click-for-advance'} onClick={handleSetAdvance}>Add filters +</div>\n        {keywordWarning? <div className='warning filter-warning'>**Please enter keyword first**</div> : null}\n        {/*ADVANCE METHODS BELOW*/}\n        <div className={show}>\n          <div>\n            <label>Name:</label>\n            <input className='filter-fullname' type='text' name='fullname' value={fullname} placeholder='Enter name here...' onChange={handleChange}/>\n            {warning ? <div className='warning'>{warning}</div> : null}\n          </div>\n          <div>\n            <label>Minium amount of repos:</label>\n            <input className='filter-repos' type='number' name='repos' value={repos} onChange={handleChange}/>\n          </div>\n          <div>\n            <label>Minium amount of followers:</label>\n            <input className='filter-followers' type='number' name='followers' value={followers} onChange={handleChange}/>\n          </div>\n          <div>\n            <label>Language:</label>\n            <select id='drop-down' name='language' form='search' onChange={handleChange}>\n              <option value=''>--</option>\n              {ghLans.map(lan => {\n                let lanVal = lan\n                lanVal = lanVal.replace('#', '%23')\n\n                return (\n                  <option key={lanVal} value={lanVal}>{lan}</option>\n                )\n              })}\n            </select>\n          </div>\n          <div className='clear-filters' onClick={handleClearFilters}>Clear filters</div>\n        </div>\n\n      </form>\n    </div>\n  )\n}\n\nexport default SearchBar","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport actions from '../store/actions'\nimport { PageNav } from '.'\n\n\nconst Results = () => {\n\n  const { page, keyword } = useParams()\n\n  const keywordOnFile = useSelector(state => state.keyword)\n  const pageOnFile = useSelector(state => state.page)\n  const users = useSelector(state => state.users)\n  const totalCount = useSelector(state => state.totalCount)\n  const pagination = useSelector(state => state.pagination)\n  const serverError = useSelector(state => state.serverError)\n\n  const dispatch = useDispatch()\n\n  const APIPage = Math.floor((page-1)/10) + 1\n\n  const localStorage = window.localStorage\n\n  useEffect(() => {\n\n    // the ONLY place in this whole app that make dispatches to store\n    // COMPARE: if keyword changed means new search => erase everything in store & localStorage => perform new search\n    if(keyword !== keywordOnFile) {\n\n      localStorage.clear()\n      dispatch(actions.clearTotalCount())\n      dispatch(actions.clearUsers())\n\n      dispatch(actions.gotKeyword(keyword)) //sets the query string to store\n      dispatch(actions.gotPage(page))\n      dispatch(actions.searchUsers(keyword, APIPage))\n        .then(() => dispatch(actions.fetchUsers(page)))\n    }\n    // COMPARE: navigating through pages in same search \n    else if(page !== pageOnFile) {\n      \n      dispatch(actions.clearUsers())\n\n      dispatch(actions.gotPage(page))\n\n      //COMPARE: if requesting page is inside THIS page group => fetch next page of users\n      if(page<=pagination[1] && page>=pagination[0]) {\n        dispatch(actions.fetchUsers(page))\n      }\n      //COMPARE: if requesting page is in another page group => perform new search with same keyword (but different api page)\n      else {\n        dispatch(actions.searchUsers(keyword, APIPage))\n          .then(() => {\n            dispatch(actions.fetchUsers(page))\n          })\n      }\n    }\n  }, [keyword, page])\n\n\n  return(\n    <div id='results'>\n      {totalCount > -1 ?\n      // search results have returned\n      <div>\n        <div id='total-count'>{totalCount} users</div> \n        <div>\n        {users.length ? \n        users.map(({avatarUrl, name, login, email, location, repos, followers, bio, url}) => (\n          <a target='_blank' href={url} key={login}>\n            <div className='user-container'>\n              <div className='inner-container'>\n                <div className='info-left'>\n                  <img className='user-avatar' src={avatarUrl} alt='user-avatar' />\n                </div>\n                <div className='info-right'>\n                  {name? <div className='user-name'>{name}</div> : null}\n                  <div className='login'>{login}</div>\n                  {email? <div className='email'>{email}</div> : null}\n                  {location? <div className='loc'>{location}</div> : null}\n                  <div className='repo'>{repos} repos</div>\n                  <div className='followers'>{followers} followers</div>\n                  {bio?<div className='user-bio'>{bio}</div> : null}\n                </div>\n                <div className='fade-out'></div>\n              </div>\n            </div>\n          </a> \n        )) : null }\n        </div>\n      </div>\n      // server error\n      : serverError ? <div className='server-error'>You've made too many requests:( <br/>Give it a minute then refresh page to view search results:)</div>\n      // still searching\n      : <div className='loading'>LOADING...</div> }\n      {users.length ? <PageNav /> : null}\n    </div>\n  )\n}\n\nexport default Results","import React from 'react'\nimport { SearchBar, Results } from '.';\n\nconst Main = () => {\n\n  return(\n    <div id='main'>\n      <SearchBar />\n      <Results />\n    </div>\n  )\n}\n\nexport default Main","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useParams, useHistory } from 'react-router-dom'\n\nconst PageNav = () => {\n  \n  const page = useSelector(state => state.page)\n  const pagination = useSelector(state => state.pagination)\n  const users = useSelector(state => state.users)\n  const urls = useSelector(state => state.urls)\n  const totalCount = useSelector(state => state.totalCount)\n\n  const maxPage = Math.min(Math.ceil(totalCount/10),100)\n\n  const { keyword } = useParams()\n  const history = useHistory()\n\n  // building buttom page display\n  const pages = []\n\n  for(let i = pagination[0]; i <= pagination[1]; i++) {\n    pages.push(i)\n  }\n\n  const localStorage = window.localStorage\n  const APIPage = Math.floor((page-1)/10) + 1\n\n  // all the SAVE TO LOCALSTORAGE happens here when user about to leave a page\n  const handlePreviousGroup = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    localStorage.setItem(`API${APIPage}`, JSON.stringify(urls))\n    history.push(`/search/${keyword}/${pagination[1]-10}`)\n  }\n\n  const handleNextGroup = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    localStorage.setItem(`API${APIPage}`, JSON.stringify(urls))\n    history.push(`/search/${keyword}/${pagination[0]+10}`)\n  }\n\n  const handleBack = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    if(page%10 === 1) handlePreviousGroup()\n    else handleGoToPage(Number(page)-1)\n  }\n\n  const handleNext = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    if(page%10 === 0) handleNextGroup()\n    else handleGoToPage(Number(page)+1)\n  }\n\n  const handleGoToPage = target => {\n    localStorage.setItem(page, JSON.stringify(users))\n    history.push(`/search/${keyword}/${target}`)\n  }\n\n  return(\n    <div className='page-nav'>\n      {pagination[0] === 1 ? null : <div onClick={handlePreviousGroup}>{'<<'}</div>}\n      {page === '1' ? null : <div onClick={handleBack}>{'<'}</div>}\n      {pages.map(num => {\n        let fontWeight = 'none'\n        if(num == page) fontWeight = 'bold'\n        return(\n          <div key={num} className={fontWeight} onClick={()=>handleGoToPage(num)}>{num}</div>\n        )\n      })}\n      {page === maxPage.toString() ? null : <div onClick={handleNext}>></div>}\n      {pagination[1] === maxPage ? null : <div onClick={handleNextGroup}>>></div>}\n    </div>\n  )\n}\n\nexport default PageNav","import React from 'react'\nimport { Home, Main } from './components'\nimport { Switch, Route } from 'react-router-dom'\n\n\nconst App = () => {\n\n  return(\n    <div>\n      <Switch>\n        <Route path='/search/:keyword/:page' component={Main} />\n        <Route path='/' component={Home} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>\n  ,document.getElementById('root')\n)"],"sourceRoot":""}