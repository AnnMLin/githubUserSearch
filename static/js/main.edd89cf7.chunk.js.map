{"version":3,"sources":["store/actions/search.js","store/actions/index.js","store/reducers/users.js","store/reducers/urls.js","store/reducers/totalCount.js","store/reducers/keyword.js","store/reducers/page.js","store/reducers/pagination.js","store/reducers/index.js","store/index.js","components/Home.js","components/SearchBar.js","components/Results.js","components/Main.js","components/PageNav.js","app.js","serviceWorker.js","index.js"],"names":["gotUsers","users","type","gotUrls","urls","config","headers","localStorage","window","actionTypes","actions","searchUsers","keyword","APIPage","dispatch","urlsLS","getItem","JSON","parse","Promise","all","axios","get","then","data","totalCount","gotTotalCount","userUrls","items","map","userObj","url","console","log","catch","err","error","fetchUsers","num","getState","startPage","Math","floor","maxPage","min","ceil","endPage","pagination","usersLS","startIdx","paginatedUrls","slice","name","avatarUrl","avatar_url","email","login","location","repos","public_repos","followers","bio","html_url","gotKeyword","clearUsers","gotPage","page","clearTotalCount","initialState","reducer","state","action","combineReducers","store","createStore","applyMiddleware","thunk","Home","id","SearchBar","useState","setKeyword","keywordOnFile","useSelector","history","useHistory","useEffect","className","onSubmit","e","preventDefault","push","src","alt","placeholder","value","onChange","target","required","Results","useParams","pageOnFile","useDispatch","clear","length","href","key","Main","PageNav","pages","i","handlePreviousGroup","setItem","stringify","handleNextGroup","handleGoToPage","onClick","Number","fontWeight","toString","App","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edd89cf7.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const GOT_USERS = 'GOT_USERS'\nexport const GOT_URLS = 'GOT_URLS'\nexport const GOT_TOTAL_COUNT = 'GOT_TOTAL_COUNT'\nexport const GOT_KEYWORD = 'GOT_KEYWORD'\nexport const CLEAR_USERS = 'CLEAR_USERS'\nexport const GOT_PAGE = 'GOT_PAGE'\nexport const CLEAR_TOTAL_COUNT = 'CLEAR_TOTAL_COUNT'\nexport const GOT_PAGINATION = 'GOT_PAGINATION'\n\n// action creator\nconst gotUsers = users => ({type: GOT_USERS, users})\nconst gotUrls = urls => ({type: GOT_URLS, urls})\nconst gotTotalCount = totalCount => ({type: GOT_TOTAL_COUNT, totalCount})\nexport const gotKeyword = keyword => ({type: GOT_KEYWORD, keyword})\nexport const clearUsers = () => ({type: CLEAR_USERS})\nexport const gotPage = page => ({type: GOT_PAGE, page})\nexport const clearTotalCount = () => ({type: CLEAR_TOTAL_COUNT})\nconst gotPagination = pagination => ({type: GOT_PAGINATION, pagination})\n\nconst config = {\n  headers: {\n    'Authorization' : 'token '+ process.env.REACT_APP_PUBLIC_ACCESS_ONLY_PAT\n  }\n}\n\nconst localStorage = window.localStorage\n\n// thunk creator\nexport const searchUsers = (keyword, APIPage) => dispatch => {\n\n  // if urls can be found in localStorage, load it from localStorage then dispatch to store\n  const urlsLS = localStorage.getItem(`API${APIPage}`)\n  if(urlsLS) {\n    const urls = JSON.parse(urlsLS)\n    const fakePromise = () => dispatch(gotUrls(urls))\n    return Promise.all([fakePromise])\n  }\n  \n  return axios.get(`https://api.github.com/search/users?q=${keyword}&page=${APIPage}&per_page=100`, config)\n    .then(({data}) => {\n      const totalCount = data['total_count']\n      // console.log('TOTALCOUNT:', totalCount)\n      dispatch(gotTotalCount(totalCount))\n      const userUrls = data.items.map(userObj => userObj.url) //array of user objects\n      console.log('SEARCH URLS: ', userUrls)\n      dispatch(gotUrls(userUrls))\n    })\n    .catch(err => {\n      console.error(err)\n    })\n}\n\nexport const fetchUsers = num => (dispatch, getState) => {\n  console.log('IN FETCH USERS', num)\n\n  const userPerPage = 10\n  \n  let startPage\n  if(num%userPerPage === 0) {\n    startPage = num - userPerPage + 1\n  } else {\n    startPage = Math.floor(num/userPerPage)*10 + 1\n  }\n  const { totalCount } = getState()\n  const maxPage = Math.min(Math.ceil(totalCount/10),100)\n  const endPage = Math.min(startPage+userPerPage-1, maxPage)\n  dispatch(gotPagination([startPage, endPage]))\n  console.log(`PAGINATION: [${startPage}, ${endPage}]`)\n\n  // if page can be found in localStorage, load it from localStorage then dispatch to store\n  const usersLS = localStorage.getItem(num+'')\n  if(usersLS) {\n    const users = JSON.parse(usersLS)\n    return dispatch(gotUsers(users))\n  }\n\n  const { urls } = getState()\n  const startIdx = (num-1)*userPerPage\n  console.log('URL SLICE:', startIdx%100, startIdx%100===90? 100 : (startIdx+userPerPage)%100)\n  const paginatedUrls = urls.slice(startIdx%100, startIdx%100===90? 100 : (startIdx+userPerPage)%100)\n  console.log('SLICEDURLS:', paginatedUrls)\n\n  return Promise.all(paginatedUrls.map(url => axios.get(url, config)))\n    .then(data => (\n      data.map(({data}) => {\n        const {name, avatar_url, email, login, location, public_repos, followers, bio, html_url} = data\n        return {\n          name,\n          avatarUrl : avatar_url,\n          email,\n          login,\n          location,\n          repos: public_repos,\n          followers,\n          bio,\n          url: html_url\n        }\n      })\n    ))\n    .then(users => {\n      dispatch(gotUsers(users))\n    })\n    .catch(err => {\n      console.error(err)\n    })\n}","import { GOT_USERS, GOT_URLS, GOT_TOTAL_COUNT, GOT_KEYWORD, CLEAR_USERS, GOT_PAGE, CLEAR_TOTAL_COUNT, GOT_PAGINATION, gotKeyword, searchUsers, fetchUsers, clearUsers, gotPage, clearTotalCount } from './search'\n\nconst actions = {\n  searchUsers,\n  fetchUsers,\n  gotKeyword,\n  clearUsers,\n  gotPage,\n  clearTotalCount\n}\n\nexport const actionTypes = {\n  GOT_USERS,\n  GOT_URLS,\n  GOT_TOTAL_COUNT,\n  GOT_KEYWORD,\n  CLEAR_USERS,\n  GOT_PAGE,\n  CLEAR_TOTAL_COUNT,\n  GOT_PAGINATION\n}\n\nexport default actions","import { actionTypes } from '../actions'\n\nconst initialState = []\n/*\n[{\n  name: (text) or null,\n  login: (text),\n  email: (text) or null,\n  location: (text) or null,\n  repos: (number),\n  followers : (number),\n  desc: (text) or null\n}]\n*/\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_USERS:\n      return action.users\n    case actionTypes.CLEAR_USERS:\n      return []\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = []\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_URLS:\n      return action.urls\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = -1\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_TOTAL_COUNT:\n      return action.totalCount\n    case actionTypes.CLEAR_TOTAL_COUNT:\n      return -1\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = ''\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_KEYWORD:\n      return action.keyword\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = 0\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_PAGE:\n      return action.page\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { actionTypes } from '../actions'\n\nconst initialState = []\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case actionTypes.GOT_PAGINATION:\n      return action.pagination\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { combineReducers } from 'redux'\nimport users from './users'\nimport urls from './urls'\nimport totalCount from './totalCount'\nimport keyword from './keyword'\nimport page from './page'\nimport pagination from './pagination'\n\nconst reducer = combineReducers({\n  users,\n  urls,\n  totalCount,\n  keyword,\n  page,\n  pagination\n})\n\nexport default reducer","import { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducers'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store","import React from 'react'\nimport { SearchBar } from '../components'\n\nconst Home = () => {\n\n  return (\n    <div id='home'>\n      <SearchBar />\n    </div>\n  )\n}\n\nexport default Home","import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nconst SearchBar = () => {\n\n  const [keyword, setKeyword] = useState('')\n  const keywordOnFile = useSelector(state => state.keyword)\n\n  const history = useHistory()\n\n  const handleChange = e => {\n    setKeyword(e.target.value)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    history.push(`/search/${keyword}/1`)\n  }\n\n  useEffect(() => {\n    setKeyword(keywordOnFile)\n  }, [keywordOnFile])\n\n  return(\n    <div>\n      <form className='search-bar' onSubmit={handleSubmit}>\n        <img id='icon' src={process.env.PUBLIC_URL + '/icons/G.ico'} alt='icon'/>\n        <div>\n          <input className='keyword' type='text' placeholder='Search Github users ...' name='keyword' value={keyword} onChange={handleChange} required/>\n        </div>        \n        <input className='submit' type='submit' value='Search'/>\n      </form>\n    </div>\n  )\n}\n\nexport default SearchBar","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport actions from '../store/actions'\nimport { PageNav } from '.'\n\n\nconst Results = () => {\n\n  const { page, keyword } = useParams()\n\n  const keywordOnFile = useSelector(state => state.keyword)\n  console.log('KEYWORD_STORE:', keywordOnFile)\n  const pageOnFile = useSelector(state => state.page)\n  console.log('PAGE_STORE:', pageOnFile)\n  const users = useSelector(state => state.users)\n  console.log('USERS', users)\n  const totalCount = useSelector(state => state.totalCount)\n  const pagination = useSelector(state => state.pagination)\n\n  const dispatch = useDispatch()\n\n  const APIPage = Math.floor((page-1)/10) + 1\n\n  const localStorage = window.localStorage\n\n  useEffect(() => {\n    if(keyword !== keywordOnFile) {\n\n      localStorage.clear()\n      dispatch(actions.clearTotalCount())\n      dispatch(actions.clearUsers())\n\n      dispatch(actions.gotKeyword(keyword))\n      dispatch(actions.gotPage(page))\n      dispatch(actions.searchUsers(keyword, APIPage))\n        .then(() => dispatch(actions.fetchUsers(page)))\n    }\n    else if(page !== pageOnFile) {\n      \n      dispatch(actions.clearUsers())\n\n      dispatch(actions.gotPage(page))\n      if(page<=pagination[1] && page>=pagination[0]) {\n        dispatch(actions.fetchUsers(page))\n      }\n      else {\n        dispatch(actions.searchUsers(keyword, APIPage))\n          .then(() => {\n            console.log('WAS I HERE?')\n            dispatch(actions.fetchUsers(page))\n          })\n      }\n    }\n  }, [keyword, page])\n\n\n  return(\n    <div id='results'>\n      {totalCount > -1 ?\n      // search results have returned\n      <div>\n        <div id='total-count'>{totalCount} users</div> \n        <div>\n        {users.length ? \n        users.map(({avatarUrl, name, login, email, location, repos, followers, bio, url}) => (\n          <a target='_blank' href={url} key={login}>\n            <div className='user-container'>\n              <div className='inner-container'>\n                <div className='info-left'>\n                  <img className='user-avatar' src={avatarUrl} alt='user-avatar' />\n                </div>\n                <div className='info-right'>\n                  {name? <div className='user-name'>{name}</div> : null}\n                  <div className='login'>{login}</div>\n                  {email? <div className='email'>{email}</div> : null}\n                  {location? <div className='loc'>{location}</div> : null}\n                  <div className='repo'>{repos} repos</div>\n                  <div className='followers'>{followers} followers</div>\n                  {bio?<div className='user-bio'>{bio}</div> : null}\n                </div>\n                <div className='fade-out'></div>\n              </div>\n            </div>\n          </a> \n        )) : null }\n        </div>\n      </div>\n      // still searching\n      : <div className='loading'>LOADING...</div> }\n      {users.length ? <PageNav /> : null}\n    </div>\n  )\n}\n\nexport default Results","import React from 'react'\nimport { SearchBar, Results } from '.';\n\nconst Main = () => {\n\n  return(\n    <div id='main'>\n      <SearchBar />\n      <Results />\n    </div>\n  )\n}\n\nexport default Main","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useParams, useHistory } from 'react-router-dom'\n\nconst PageNav = () => {\n  \n  const page = useSelector(state => state.page)\n  const pagination = useSelector(state => state.pagination)\n  const users = useSelector(state => state.users)\n  const urls = useSelector(state => state.urls)\n  const totalCount = useSelector(state => state.totalCount)\n\n  const maxPage = Math.min(Math.ceil(totalCount/10),100)\n\n  const { keyword } = useParams()\n  const history = useHistory()\n\n  const pages = []\n\n  for(let i = pagination[0]; i <= pagination[1]; i++) {\n    pages.push(i)\n  }\n\n  const localStorage = window.localStorage\n  const APIPage = Math.floor((page-1)/10) + 1\n\n  const handlePreviousGroup = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    localStorage.setItem(`API${APIPage}`, JSON.stringify(urls))\n    history.push(`/search/${keyword}/${pagination[1]-10}`)\n  }\n\n  const handleNextGroup = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    localStorage.setItem(`API${APIPage}`, JSON.stringify(urls))\n    history.push(`/search/${keyword}/${pagination[0]+10}`)\n  }\n\n  const handleBack = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    if(page%10 === 1) handlePreviousGroup()\n    else handleGoToPage(Number(page)-1)\n  }\n\n  const handleNext = () => {\n    localStorage.setItem(page, JSON.stringify(users))\n    if(page%10 === 0) handleNextGroup()\n    else handleGoToPage(Number(page)+1)\n  }\n\n  const handleGoToPage = target => {\n    localStorage.setItem(page, JSON.stringify(users))\n    history.push(`/search/${keyword}/${target}`)\n  }\n\n  return(\n    <div className='page-nav'>\n      {pagination[0] === 1 ? null : <div onClick={handlePreviousGroup}>{'<<'}</div>}\n      {page === '1' ? null : <div onClick={handleBack}>{'<'}</div>}\n      {pages.map(num => {\n        let fontWeight = 'none'\n        if(num == page) fontWeight = 'bold'\n        return(\n          <div key={num} className={fontWeight} onClick={()=>handleGoToPage(num)}>{num}</div>\n        )\n      })}\n      {page === maxPage.toString() ? null : <div onClick={handleNext}>></div>}\n      {pagination[1] === maxPage ? null : <div onClick={handleNextGroup}>>></div>}\n    </div>\n  )\n}\n\nexport default PageNav","import React from 'react'\nimport { Home, Main } from './components'\nimport { Switch, Route } from 'react-router-dom'\n\n\nconst App = () => {\n\n  return(\n    <div>\n      <Switch>\n        <Route path='/search/:keyword/:page' component={Main} />\n        <Route path='/' component={Home} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>\n  ,document.getElementById('root')\n)"],"sourceRoot":""}