{"version":3,"sources":["store/actions/index.js","store/actions/user.js","store/reducers/user.js","store/reducers/index.js","store/index.js","app.js","serviceWorker.js","index.js"],"names":["actions","getAllUsers","dispatch","axios","get","then","users","type","gotAllUsers","initialState","reducer","state","action","combineReducers","user","store","createStore","applyMiddleware","thunk","App","useDispatch","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"kOAUeA,G,MARC,CACdC,YCIyB,kBAAM,SAAAC,GAAQ,OACvCC,IAAMC,IAAI,SACPC,MAAK,SAAAC,GACJJ,EALqB,SAAAI,GAAK,MAAK,CAACC,KAFT,gBAE8BD,SAK5CE,CAAYF,WCRrBG,EAAe,GASNC,EAPC,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAG9C,OAFKA,EAAOL,KAELI,GCAID,EAJCG,YAAgB,CAC9BC,S,QCEaC,EAFDC,YAAYN,EAASO,YAAgBC,MCapCC,EAbH,WAEV,IAAMjB,EAAWkB,cAMjB,OAJAC,qBAAU,WACRnB,EAASF,EAAQC,iBAChB,IAGD,6CCDgBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGHc,SAASC,eAAe,W","file":"static/js/main.1d81ee74.chunk.js","sourcesContent":["import { GOT_ALL_USERS, getAllUsers } from './user'\n\nconst actions = {\n  getAllUsers\n}\n\nconst actionTypes = {\n  GOT_ALL_USERS\n}\n\nexport default actions","import axios from 'axios'\nimport { URLSearchParams } from 'url';\n\nexport const GOT_ALL_USERS = 'GOT_ALL_USERS'\n\nexport const gotAllUsers = users => ({type: GOT_ALL_USERS, users})\n\nexport const getAllUsers = () => dispatch => (\n  axios.get('/user')\n    .then(users=> {\n      dispatch(gotAllUsers(users))\n    })\n)","import {GOT_ALL_USERS} from '../actions'\n\nconst initialState = {}\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    default:\n    return state\n  }\n}\n\nexport default reducer","import { combineReducers } from 'redux'\nimport user from './user'\n\nconst reducer = combineReducers({\n  user\n})\n\nexport default reducer","import { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducers'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport actions from './store/actions'\n\nconst App = () => {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(actions.getAllUsers())\n  }, [])\n\n  return(\n    <div>Boilermaker</div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>\n  ,document.getElementById('root')\n)"],"sourceRoot":""}